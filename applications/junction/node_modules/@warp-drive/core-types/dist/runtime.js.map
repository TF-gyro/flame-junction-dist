{"version":3,"file":"runtime.js","sources":["../src/runtime.ts"],"sourcesContent":["import type { LOG_CONFIG } from '@warp-drive/build-config/-private/utils/logging';\n\nimport { getOrSetUniversal } from './-private';\n\nconst RuntimeConfig: { debug: Partial<LOG_CONFIG> } = getOrSetUniversal('WarpDriveRuntimeConfig', {\n  debug: {},\n});\n\nconst settings = globalThis.sessionStorage?.getItem('WarpDriveRuntimeConfig');\nif (settings) {\n  Object.assign(RuntimeConfig, JSON.parse(settings));\n}\n\nexport function getRuntimeConfig(): typeof RuntimeConfig {\n  return RuntimeConfig;\n}\n\n/**\n * Upserts the specified logging configuration into the runtime\n * config.\n *\n * globalThis.setWarpDriveLogging({ LOG_PAYLOADS: true } });\n *\n * @typedoc\n */\nexport function setLogging(config: Partial<LOG_CONFIG>): void {\n  Object.assign(RuntimeConfig.debug, config);\n  globalThis.sessionStorage?.setItem('WarpDriveRuntimeConfig', JSON.stringify(RuntimeConfig));\n}\n"],"names":["RuntimeConfig","getOrSetUniversal","debug","settings","globalThis","sessionStorage","getItem","Object","assign","JSON","parse","getRuntimeConfig","setLogging","config","setItem","stringify"],"mappings":";;AAIA,MAAMA,aAA6C,GAAGC,iBAAiB,CAAC,wBAAwB,EAAE;AAChGC,EAAAA,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,MAAMC,QAAQ,GAAGC,UAAU,CAACC,cAAc,EAAEC,OAAO,CAAC,wBAAwB,CAAC;AAC7E,IAAIH,QAAQ,EAAE;EACZI,MAAM,CAACC,MAAM,CAACR,aAAa,EAAES,IAAI,CAACC,KAAK,CAACP,QAAQ,CAAC,CAAC;AACpD;AAEO,SAASQ,gBAAgBA,GAAyB;AACvD,EAAA,OAAOX,aAAa;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASY,UAAUA,CAACC,MAA2B,EAAQ;EAC5DN,MAAM,CAACC,MAAM,CAACR,aAAa,CAACE,KAAK,EAAEW,MAAM,CAAC;AAC1CT,EAAAA,UAAU,CAACC,cAAc,EAAES,OAAO,CAAC,wBAAwB,EAAEL,IAAI,CAACM,SAAS,CAACf,aAAa,CAAC,CAAC;AAC7F;;;;"}