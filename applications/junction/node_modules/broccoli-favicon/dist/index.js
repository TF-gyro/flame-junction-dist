"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
exports.default = void 0;

var _broccoliCachingWriter = _interopRequireDefault(
  require("broccoli-caching-writer")
);

var _favicons = _interopRequireDefault(require("favicons"));

var _config = _interopRequireDefault(require("./config"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _himalaya = require("himalaya");

var _heimdalljsLogger = _interopRequireDefault(require("heimdalljs-logger"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const logger = (0, _heimdalljsLogger.default)("broccoli-favicon");

class Favicon extends _broccoliCachingWriter.default {
  constructor(node, options = {}) {
    super([node], {
      name: options.name,
      annotation: options.annotation,
    });
    this.config = (0, _lodash.default)({}, _config.default, options);
  }

  build() {
    let { iconPath, faviconsConfig } = this.config;
    iconPath = _path.default.join(this.inputPaths[0], iconPath);

    if (!_fs.default.existsSync(iconPath)) {
      logger.warn(
        `Favicon file has been not detected in specified path: "${iconPath}"`
      );
      return Promise.resolve();
    }

    return this._generateFavicons(iconPath, faviconsConfig).then(
      this._onSuccess.bind(this)
    );
  }

  _onSuccess(response) {
    let parsedHtml = (0, _himalaya.parse)(response.html.join(""));

    this._saveFiles(response.images.concat(response.files));

    return this.config.onSuccess(response.html, parsedHtml);
  }

  _generateFavicons(imagePath, options = {}) {
    return new Promise((resolve, reject) => {
      return (0, _favicons.default)(imagePath, options, (error, response) => {
        if (error) {
          reject(new Error(`${error.name}: ${error.message}`));
        } else {
          resolve(response);
        }
      });
    });
  }

  _saveFiles(files) {
    files.forEach((file) =>
      _fs.default.writeFileSync(
        _path.default.join(this.outputPath, file.name),
        file.contents
      )
    );
  }
}

exports.default = Favicon;
